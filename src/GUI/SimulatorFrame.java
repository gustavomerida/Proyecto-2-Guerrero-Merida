/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import GUI.ColorRenderer;

import AuxClass.List;
import AuxClass.Node;
//import FileFunctions.FileSystemData;
import FileFunctions.TreeNodeData;
import MainClasses.App;
import MainPackage.Block;
import MainPackage.Directory;
import MainPackage.File;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Enumeration;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.ListModel;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author Angelo
 */
public class SimulatorFrame extends javax.swing.JFrame {

    /**
     * Creates new form SimulatorFrame
     */
    // Creacion del modelo Jtree
    private DefaultTreeModel Model;
    protected DefaultMutableTreeNode SelectedNode;
    private final App app = App.getInstance();

    private List<DefaultListModel> listModels = new List<>("LISTA MODELOS");
    private List<JList> jLists = new List<>("LISTA JLISTS");

    BGPane bg = new BGPane();

    public SimulatorFrame() {
        this.setContentPane(bg);
        initComponents();
        setIconImage(new ImageIcon(getClass().getResource("/Images/mainicon.png")).getImage());
        SimulatorInit();

        Model = new DefaultTreeModel(new DefaultMutableTreeNode("root"));
        this.FilesTree.setModel(Model);

        this.setBounds(0, 0, 986, 618);
        this.setResizable(false);
        
        PanelBlocksInit();
        app.getJsonData().loadJSON(FilesTree, this);
        configurarTreeRenderer();
        

    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new BGPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        FilesTree = new javax.swing.JTree();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        CreateButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        ComboBoxCreateSelection = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        Guardar = new javax.swing.JButton();
        SliderValueLabel = new javax.swing.JLabel();
        DeleteButton = new javax.swing.JButton();
        ComboBoxUserMode = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        SaveJSONButton = new javax.swing.JButton();
        GuardarCambios = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        FilesTree.setBorder(null);
        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        FilesTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        FilesTree.setMaximumSize(new java.awt.Dimension(30, 30));
        FilesTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                FilesTreeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(FilesTree);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(500, 30, 460, 270);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 228, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(500, 340, 460, 230);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Bloque Inicial", "Longitud", "Bloques Asignados"
            }
        ));
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane3.setViewportView(jTable1);

        jPanel4.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel4);
        jPanel4.setBounds(10, 30, 470, 190);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ASSIGN TABLE");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(180, 10, 130, 20);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("JTREE");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(700, 10, 90, 17);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("SD");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(710, 320, 50, 20);

        UpdateButton.setBackground(new java.awt.Color(51, 153, 255));
        UpdateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        UpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        UpdateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/design.png"))); // NOI18N
        UpdateButton.setText("Modificar");
        UpdateButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        UpdateButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        UpdateButton.setIconTextGap(10);
        UpdateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UpdateButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                UpdateButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                UpdateButtonMouseExited(evt);
            }
        });
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(UpdateButton);
        UpdateButton.setBounds(20, 360, 100, 26);

        CreateButton.setBackground(new java.awt.Color(0, 153, 102));
        CreateButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        CreateButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/plus.png"))); // NOI18N
        CreateButton.setText("Crear");
        CreateButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        CreateButton.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CreateButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        CreateButton.setIconTextGap(10);
        CreateButton.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                CreateButtonMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                CreateButtonMouseMoved(evt);
            }
        });
        CreateButton.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                CreateButtonFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                CreateButtonFocusLost(evt);
            }
        });
        CreateButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CreateButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                CreateButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                CreateButtonMouseExited(evt);
            }
        });
        CreateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateButtonActionPerformed(evt);
            }
        });
        jPanel1.add(CreateButton);
        CreateButton.setBounds(20, 280, 100, 26);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Nombre del Archivo");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel1.add(jLabel5);
        jLabel5.setBounds(140, 330, 150, 16);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField1);
        jTextField1.setBounds(300, 330, 170, 22);

        ComboBoxCreateSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Archivo", "Directorio" }));
        ComboBoxCreateSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxCreateSelectionActionPerformed(evt);
            }
        });
        jPanel1.add(ComboBoxCreateSelection);
        ComboBoxCreateSelection.setBounds(290, 280, 88, 22);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("¿Qué desea crear?");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        jPanel1.add(jLabel1);
        jLabel1.setBounds(130, 270, 130, 40);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Tamaño en Bloques");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(140, 380, 120, 15);

        jSlider1.setMaximum(20);
        jSlider1.setMinimum(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setValue(1);
        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jPanel1.add(jSlider1);
        jSlider1.setBounds(280, 380, 200, 28);

        Guardar.setBackground(new java.awt.Color(0, 102, 102));
        Guardar.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        Guardar.setForeground(new java.awt.Color(255, 255, 255));
        Guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/forward.png"))); // NOI18N
        Guardar.setText("Guardar");
        Guardar.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        Guardar.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        Guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GuardarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                GuardarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                GuardarMouseExited(evt);
            }
        });
        Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarActionPerformed(evt);
            }
        });
        jPanel1.add(Guardar);
        Guardar.setBounds(280, 430, 90, 26);

        SliderValueLabel.setText("1");
        jPanel1.add(SliderValueLabel);
        SliderValueLabel.setBounds(480, 380, 20, 20);

        DeleteButton.setBackground(new java.awt.Color(255, 102, 102));
        DeleteButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        DeleteButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/bin.png"))); // NOI18N
        DeleteButton.setText("Eliminar");
        DeleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        DeleteButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        DeleteButton.setIconTextGap(10);
        DeleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DeleteButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                DeleteButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                DeleteButtonMouseExited(evt);
            }
        });
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        jPanel1.add(DeleteButton);
        DeleteButton.setBounds(20, 320, 100, 26);

        ComboBoxUserMode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Modo Usuario", "Modo Administrador" }));
        ComboBoxUserMode.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        ComboBoxUserMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxUserModeActionPerformed(evt);
            }
        });
        jPanel1.add(ComboBoxUserMode);
        ComboBoxUserMode.setBounds(30, 490, 153, 30);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setText("Modos de usuario:");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(30, 470, 140, 20);

        SaveJSONButton.setBackground(new java.awt.Color(102, 102, 102));
        SaveJSONButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        SaveJSONButton.setForeground(new java.awt.Color(255, 255, 255));
        SaveJSONButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/diskette.png"))); // NOI18N
        SaveJSONButton.setText("Guardar archivos");
        SaveJSONButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        SaveJSONButton.setIconTextGap(10);
        SaveJSONButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveJSONButtonMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                SaveJSONButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                SaveJSONButtonMouseExited(evt);
            }
        });
        jPanel1.add(SaveJSONButton);
        SaveJSONButton.setBounds(20, 230, 140, 30);

        GuardarCambios.setBackground(new java.awt.Color(0, 102, 102));
        GuardarCambios.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        GuardarCambios.setForeground(new java.awt.Color(255, 255, 255));
        GuardarCambios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/forward.png"))); // NOI18N
        GuardarCambios.setText("Actualizar");
        GuardarCambios.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        GuardarCambios.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        GuardarCambios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GuardarCambiosMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                GuardarCambiosMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                GuardarCambiosMouseExited(evt);
            }
        });
        GuardarCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarCambiosActionPerformed(evt);
            }
        });
        jPanel1.add(GuardarCambios);
        GuardarCambios.setBounds(160, 430, 110, 26);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setRows(5);
        jScrollPane1.setViewportView(logTextArea);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(200, 480, 280, 86);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 972, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PanelBlocksInit() {
        jPanel3.setLayout(new GridLayout(5, 5, 5, 5));

        // NECESARIO PARA LAS ACTUALIZACIONES DE LAS MISMAS
        this.listModels = new List<>("NUEVA LISTA MODELOS");
        this.jLists = new List<>("NUEVA LISTA JLISTS");

        for (int i = 0; i < app.getSDApp().getLimitBlocks(); i++) {
            DefaultListModel<String> model = new DefaultListModel<>();

            // VALORES POR DEFECTO DE LAS JLISTS
            model.addElement("Bloque " + (i + 1));
            model.addElement("Libre");

            JList<String> jList = new JList<>(model);

//            jList.setEnabled(false);
            jList.setBorder(BorderFactory.createLineBorder(Color.GRAY));
            jList.setCellRenderer(new DefaultListCellRenderer()); // Renderizador inicial

            this.jPanel3.add(new JScrollPane(jList));
            this.listModels.append(model);

            this.jLists.append(jList);
        }
        jPanel3.revalidate();
    }

    // SE DEBE VER CUANDO EXPLOTE
    private void PanelBlocksUpdate(String fileName) {

        Node<Block> currentBlock = app.getSDApp().getBlocksList().first();
        int index = 0;

        while (currentBlock != null && index < listModels.size()) {
            DefaultListModel<String> model = listModels.get(index);

            // this.jLists.get(index).setCellRenderer(new ColorRenderer()); // EN ETAPA DE PRUEBAS.
            // SE MODIFICA LA SEGUNDA STRING DEL MODEL
            if (currentBlock.gettInfo().isState() && model.get(1).equals("Libre")) {
                model.set(1, fileName);
            } else if (model.get(1).equals("Libre")) {
                model.set(1, "Libre");
            }
            currentBlock = currentBlock.getpNext();
            index++;
        }
    }

    private void PanelBlockUpdateSpecificFile(File FileSelected, boolean del) {

        // BLOQUES DEL ARCHIVO
        List<Block> ListBlocksFile = FileSelected.getBlocksList();

        // PRIMER BLOQUE DEL ARCHIVO
        Node<Block> currentBlockNode = ListBlocksFile.first();

        while (currentBlockNode != null) {

            int blockId = currentBlockNode.gettInfo().getId();

            for (int i = 0; i < listModels.size(); i++) {

                DefaultListModel<String> model = listModels.get(i);

                int modelBlockId = Integer.parseInt(model.get(0).substring(7));

                if (blockId == modelBlockId) {
                    if (del) {
                        model.set(1, "Libre");
                        currentBlockNode.gettInfo().setState(!currentBlockNode.gettInfo().isState());
                    } else {
                        model.set(1, FileSelected.getFileName());
                    }
                    break;
                }
            }

            currentBlockNode = currentBlockNode.getpNext();
        }

        this.FilesTree.revalidate();
        this.FilesTree.repaint();
    }

    private void SimulatorInit() {
        JLabel[] CreateLabels = {jLabel1, jLabel5, jLabel6};
        for (int i = 0; i < CreateLabels.length; i++) {
            CreateLabels[i].setVisible(false);
        }

        ComboBoxCreateSelection.setVisible(false);
        jTextField1.setVisible(false);
        jSlider1.setVisible(false);
        Guardar.setVisible(false);
        SliderValueLabel.setVisible(false);
        CreateButton.setVisible(false);
        DeleteButton.setVisible(false);
        UpdateButton.setVisible(false);
        GuardarCambios.setVisible(false);
    }

    // PARA PINTAR EL JTREE
    private void configurarTreeRenderer() {
        ImageIcon fileIcon = new ImageIcon(getClass().getResource("../Images/file2.png"));
        ImageIcon directoryIcon = new ImageIcon(getClass().getResource("../Images/directory.png"));

        DefaultTreeCellRenderer renderer = new DefaultTreeCellRenderer() {
            @Override
            public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel,
                    boolean expanded, boolean leaf, int row,
                    boolean hasFocus) {
                super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);

                if (value instanceof DefaultMutableTreeNode) {
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;
                    String label = node.getUserObject().toString();

                    if (label.contains(" [A]")) {
                        setIcon(fileIcon);

                    } else if (label.contains(" [D]") || label.contains("root")) {
                        setIcon(directoryIcon);
                    }
                }
                return this;
            }
        };

        FilesTree.setCellRenderer(renderer);
    }

    private void FilesTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_FilesTreeValueChanged
        SelectedNode = (DefaultMutableTreeNode) this.FilesTree.getLastSelectedPathComponent();
    }//GEN-LAST:event_FilesTreeValueChanged

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void ComboBoxCreateSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxCreateSelectionActionPerformed
        // Atributos dinamicos
        JLabel[] JLabelArray = {jLabel3, jLabel5};

        // Logica para la creacion de un archivo o directorio
        String selectedItem = this.ComboBoxCreateSelection.getModel().getSelectedItem().toString();

        if (selectedItem.equalsIgnoreCase("Archivo")) {
            JLabelArray[1].setText("Nombre del Archivo"); //aquí cambié a JLabelArray[1]

            JLabelArray[1].setVisible(true);
            this.jSlider1.setVisible(true);
            SliderValueLabel.setVisible(true);
            jLabel6.setVisible(true);

        } else {
            JLabelArray[1].setText("Nombre del Directorio"); //aquí cambié a JLabelArray[1]
            JLabelArray[1].setVisible(true);
            this.jSlider1.setVisible(false);
            SliderValueLabel.setVisible(false);
            jLabel6.setVisible(false);
        }
    }//GEN-LAST:event_ComboBoxCreateSelectionActionPerformed

    private void updateSliderLabel() {
        String SliderValue = String.valueOf(this.jSlider1.getValue());
        this.SliderValueLabel.setText(SliderValue);
    }

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        updateSliderLabel();
    }//GEN-LAST:event_jSlider1StateChanged

    private boolean VerifyFile(String FileName) {
        if (this.SelectedNode != null) {

            Enumeration<TreeNode> children = this.SelectedNode.children();
            while (children.hasMoreElements()) {
                DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();

                String nodeName = child.getUserObject().toString();

                if (nodeName.contains(" [")) {
                    nodeName = nodeName.substring(0, nodeName.indexOf(" [")).trim();
                }
                if (nodeName.equalsIgnoreCase(FileName)) {
                    return true;
                }
            }
        }
        return false;
    }

    private boolean VerifyDirectory(String directoryName) {
        if (this.SelectedNode != null) {

            Enumeration<TreeNode> children = this.SelectedNode.children();
            while (children.hasMoreElements()) {

                DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();
                String label = child.getUserObject().toString();

                if (label.contains(" [D]")) {

                    String nodeName = label.substring(0, label.indexOf(" [D]")).trim();
                    if (nodeName.equalsIgnoreCase(directoryName)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    // PUEDO MODIFICAR
    private void updateAssignmentTable() {

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        model.setRowCount(0);

        int LimitTable = app.getFileSystemApp().getAssignTableSystem().getListFiles().size();
        List<File> ListFiles = app.getFileSystemApp().getAssignTableSystem().getListFiles();
        if (!ListFiles.isEmpty()){
            for (int i = 0; i < LimitTable; i++) {

                String FileName = ListFiles.get(i).getFileName();
                int InitialBlock = ListFiles.get(i).getFirstBlock().getId();
                int Length = ListFiles.get(i).getBlocksList().size();
                String ListaBloques = ListFiles.get(i).getBlocksList().travel2();

                model.addRow(new Object[]{FileName, InitialBlock, Length, ListaBloques});

            }
        }

    }

    private void GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarActionPerformed
        //
    }//GEN-LAST:event_GuardarActionPerformed

    private void CreateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateButtonMouseClicked
        String selectedItem = this.ComboBoxCreateSelection.getModel().getSelectedItem().toString();
        if (selectedItem.equalsIgnoreCase("Archivo")) {
            jLabel5.setText("Nombre del Archivo");
        } else {
            jLabel5.setText("Nombre del Directorio");
        }
        JLabel[] CreateLabels = {jLabel1, jLabel5, jLabel6};
        for (int i = 0; i < CreateLabels.length; i++) {
            CreateLabels[i].setVisible(true);
        }
        ComboBoxCreateSelection.setVisible(true);
        jTextField1.setVisible(true);
        jSlider1.setVisible(true);
        Guardar.setVisible(true);
        SliderValueLabel.setVisible(true);
        GuardarCambios.setVisible(false);

    }//GEN-LAST:event_CreateButtonMouseClicked

    private void CreateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateButtonActionPerformed

    }//GEN-LAST:event_CreateButtonActionPerformed

    private void UpdateLogArea(String Info) {
        this.logTextArea.append(Info);
        this.FilesTree.revalidate();
        this.FilesTree.repaint();
    }


    private void GuardarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarMouseClicked

        // CREACION DE ARCHIVOS Y DIRECTORIOS
        // Verificar que se haya seleccionado un nodo en el árbol
        if (this.SelectedNode == null) {
            JOptionPane.showMessageDialog(null, "Seleccione una carpeta donde guardar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Verificar directamente si el nodo seleccionado es un archivo, buscando la etiqueta " [A]"
        String selectedNodeLabel = this.SelectedNode.getUserObject().toString();

        if (selectedNodeLabel.contains(" [A]")) {
            JOptionPane.showMessageDialog(null, "No se pueden crear archivos dentro de otros archivos", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener el tipo de elemento a crear y el nombre ingresado
        String elementToCreate = ComboBoxCreateSelection.getModel().getSelectedItem().toString();
        String nameInput = jTextField1.getText().trim(); // archivo 1 --> archivo1 quitamos los espacios

        if (nameInput.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El nombre no puede estar vacio", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (elementToCreate.equalsIgnoreCase("Archivo")) {
            int blockSize = jSlider1.getModel().getValue();

            // Verificar si ya existe un archivo con el mismo nombre en la misma carpeta
            if (VerifyFile(nameInput)) {
                JOptionPane.showMessageDialog(null, "Ya existe un archivo con el mismo nombre en esta carpeta", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // CREACION DEL NUEVO ARCHIVO
            File newFile = new File(nameInput, blockSize, null, null, null);

            boolean accessToSD = app.getFileSystemApp().searchAndSet(newFile.getBlockSize(), newFile);

            if (!accessToSD) {
                JOptionPane.showMessageDialog(null, "No se pudo asignar el archivo en el sistema", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            System.out.println("El archivo ha sido colocado en la SD");

            // Crear el nodo del árbol; 'false' indica que no permite hijos (archivo)  
            // CAMBIAR EL TIPO DE DATO QUE SE VA A GUARDAR COMO UN OBJETO.
            //DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newFile.getFileName() + " [A]", false);
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newFile, false);

            // LOGICA PARA EL LOG
            String InfoLogArea = app.getFileSystemApp().ShowDate(newNode, "Archivo", "creado");
            UpdateLogArea(InfoLogArea);

            System.out.println("Clase del nodo creado" + newNode.getUserObject().getClass());
            // FINO ES FILE

            try {

                DefaultTreeModel model = (DefaultTreeModel) this.FilesTree.getModel();
                model.insertNodeInto(newNode, this.SelectedNode, this.SelectedNode.getChildCount());

                // TODO BIEN
                System.out.println("Clase del nodo creado en el arbol " + newNode.getUserObject().getClass());

                // Agregar el archivo a la lista del sistema
                app.getFileSystemApp().getAssignTableSystem().getListFiles().append(newFile);

                // Actualizar la interfaz
                PanelBlocksUpdate(nameInput);

                updateAssignmentTable();

            } catch (Exception e) {
                // PENDIENTE CON ESTE CATCH

                System.out.println("Ocurrió un error al agregar el archivo: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "No se pueden crear archivos dentro de otros archivos.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else {

            if (VerifyDirectory(nameInput)) {
                JOptionPane.showMessageDialog(null, "Ya existe un directorio con el mismo nombre en esta carpeta", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // CREO QUE LOS OTROS 2 ATRUBUTOS DE DIRECTORY YA NO SON NECESARIOS GRACIAS A LOS METODOS DEL JTREE
            Directory newDirectory = new Directory(nameInput, null, null);

            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newDirectory, true);
//            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newDirectory + " [D]", true);

            // LOGICA PARA EL LOG
            String InfoLogArea = app.getFileSystemApp().ShowDate(newNode, "Directorio", "creado");
            UpdateLogArea(InfoLogArea);

            try {

                DefaultTreeModel model = (DefaultTreeModel) this.FilesTree.getModel();
                model.insertNodeInto(newNode, this.SelectedNode, this.SelectedNode.getChildCount());

                // Aquí se debe agregar el directorio a la estructura lógica del sistema,
                // por ejemplo, agregándolo a la lista de directorios del padre
            } catch (Exception e) {

                System.out.println("Ocurrió un error al agregar el directorio: " + e.getMessage());
                JOptionPane.showMessageDialog(null, "Error al crear el directorio.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_GuardarMouseClicked

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void ComboBoxUserModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxUserModeActionPerformed
        // Logica para el modo de usuario
        String selectedItem = this.ComboBoxUserMode.getModel().getSelectedItem().toString();

        if (selectedItem.equalsIgnoreCase("Modo Usuario")) {
            //Deshabilitamos las opciones de administrador
            CreateButton.setVisible(false);
            DeleteButton.setVisible(false);
            UpdateButton.setVisible(false);

            //Ocultamos otras opciones
            jLabel5.setVisible(false);
            jSlider1.setVisible(false);
            SliderValueLabel.setVisible(false);
            jLabel6.setVisible(false);
            ComboBoxCreateSelection.setVisible(false);
            jTextField1.setVisible(false);
            Guardar.setVisible(false);
            jLabel1.setVisible(false);
            GuardarCambios.setVisible(false);

        } else {
            CreateButton.setVisible(true);
            DeleteButton.setVisible(true);
            UpdateButton.setVisible(true);
        }
    }//GEN-LAST:event_ComboBoxUserModeActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void CreateButtonFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CreateButtonFocusGained

    }//GEN-LAST:event_CreateButtonFocusGained

    private void CreateButtonFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_CreateButtonFocusLost

    }//GEN-LAST:event_CreateButtonFocusLost

    private void CreateButtonMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateButtonMouseDragged
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateButtonMouseDragged

    private void CreateButtonMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateButtonMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_CreateButtonMouseMoved

    private void CreateButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateButtonMouseExited
        // TODO add your handling code here:
        CreateButton.setBackground(new Color(0, 153, 102));
    }//GEN-LAST:event_CreateButtonMouseExited

    private void CreateButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CreateButtonMouseEntered
        // TODO add your handling code here:
        CreateButton.setBackground(new Color(0, 102, 51));
    }//GEN-LAST:event_CreateButtonMouseEntered

    private void DeleteButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteButtonMouseEntered
        // TODO add your handling code here:
        DeleteButton.setBackground(new Color(255, 51, 0));
    }//GEN-LAST:event_DeleteButtonMouseEntered

    private void DeleteButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteButtonMouseExited
        // TODO add your handling code here:
        DeleteButton.setBackground(new Color(255, 102, 102));
    }//GEN-LAST:event_DeleteButtonMouseExited

    private void SaveJSONButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveJSONButtonMouseEntered
        // TODO add your handling code here:
        SaveJSONButton.setBackground(new Color(51, 51, 51));
    }//GEN-LAST:event_SaveJSONButtonMouseEntered

    private void SaveJSONButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveJSONButtonMouseExited
        // TODO add your handling code here:
        SaveJSONButton.setBackground(new Color(102, 102, 102));
    }//GEN-LAST:event_SaveJSONButtonMouseExited

    private void UpdateButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateButtonMouseEntered
        // TODO add your handling code here:
        UpdateButton.setBackground(new Color(0, 102, 255));
    }//GEN-LAST:event_UpdateButtonMouseEntered

    private void UpdateButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateButtonMouseExited
        // TODO add your handling code here:
        UpdateButton.setBackground(new Color(51, 153, 255));
    }//GEN-LAST:event_UpdateButtonMouseExited

    private void GuardarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarMouseEntered
        // TODO add your handling code here:
        Guardar.setBackground(new Color(0, 51, 51));
    }//GEN-LAST:event_GuardarMouseEntered

    private void GuardarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarMouseExited
        // TODO add your handling code here:
        Guardar.setBackground(new Color(0, 102, 102));
    }//GEN-LAST:event_GuardarMouseExited

    private void UpdateButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UpdateButtonMouseClicked
        // MODIFICAR EL NOMBRE DE UN ARCHIVO O DIRECTORIO

        jLabel5.setVisible(false);
        jSlider1.setVisible(false);
        SliderValueLabel.setVisible(false);
        jLabel6.setVisible(false);
        ComboBoxCreateSelection.setVisible(false);
        jTextField1.setVisible(false);
        Guardar.setVisible(false);
        jLabel1.setVisible(false);
        GuardarCambios.setVisible(false);

        // Verificar que se haya seleccionado un nodo en el árbol
        if (this.SelectedNode == null) {
            JOptionPane.showMessageDialog(null, "Seleccione una carpeta o archivo para cambiar su nombre", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //Pedir el nombre
        jTextField1.setVisible(true);
        String createName = jLabel5.getText();

        jLabel5.setText("Nombre nuevo");
        jLabel5.setVisible(true);
        GuardarCambios.setVisible(true);


    }//GEN-LAST:event_UpdateButtonMouseClicked

    private void GuardarCambiosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarCambiosMouseClicked

        String newNameInput = jTextField1.getText().trim();


        // Validar si el nombre está vacío
        if (newNameInput.isEmpty()) {
            JOptionPane.showMessageDialog(null, "El nombre no puede estar vacío.");
            return;
        }

        // Verificar si el nombre ya existe en la misma carpeta o nodo padre
        if (VerifyFileAtModify(newNameInput)) {
            JOptionPane.showMessageDialog(null, "Ya existe un archivo o directorio con ese nombre en la misma ubicación.");
            return;
        }

        File SelectedNodeAuxJtree = (File) this.SelectedNode.getUserObject();


        // LOGICA PARA ACTUALIZAR EN EL SD Y ASSIGN 
        System.out.println("Nodo seleccionado LUEGO DE HACER EL CAMBIO EN JTREE: " + this.SelectedNode.getUserObject().getClass());

        if (this.SelectedNode.getUserObject() instanceof File) {

            System.out.println("Obtenemos el archivo");
            File SelectedFile = (File) this.SelectedNode.getUserObject();
            //buscar en la lista de files por id del primer bloque
            List<File> ListFiles = app.getFileSystemApp().getAssignTableSystem().getListFiles();
            Node<File> listedNode = ListFiles.getpFirst();
            while (listedNode!=null){
                System.out.println("recorriendo");
                System.out.println(listedNode.gettInfo().getFirstBlock().getId());
                System.out.println(SelectedFile.getFirstBlock().getId());
                if (listedNode.gettInfo().getFirstBlock().getId() == SelectedFile.getFirstBlock().getId()) {
                    System.out.println("SON IGUALES");
                    SelectedFile = listedNode.gettInfo();
                }
                listedNode = listedNode.getpNext();
            }
            SelectedFile.setFileName(newNameInput);
            String Info = app.getFileSystemApp().ShowDate(this.SelectedNode, "Archivo", "modificado");
            UpdateLogArea(Info);

            this.SelectedNode.setUserObject(SelectedFile);

            this.FilesTree.revalidate();
            this.FilesTree.repaint();

            updateAssignmentTable();
            PanelBlockUpdateSpecificFile(SelectedFile, false);


            JOptionPane.showMessageDialog(null, "Nombre cambiado exitosamente");
        }else{
            Directory SelectedDir = (Directory) this.SelectedNode.getUserObject();
            SelectedDir.setDirectoryName(newNameInput);
            String Info = app.getFileSystemApp().ShowDate(this.SelectedNode, "Directorio", "modificado");
            UpdateLogArea(Info);

            this.SelectedNode.setUserObject(SelectedDir);

            this.FilesTree.revalidate();
            this.FilesTree.repaint();

        }
        
        


    }//GEN-LAST:event_GuardarCambiosMouseClicked

    private boolean VerifyFileAtModify(String FileName) {
        if (this.SelectedNode != null) {
            // Obtener el nodo padre para evaluar los nombres de los hijos
            DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) this.SelectedNode.getParent();
            if (parentNode != null) {
                Enumeration<TreeNode> children = parentNode.children();
                while (children.hasMoreElements()) {
                    DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();
                    String nodeName = child.getUserObject().toString();

                    // Eliminar sufijo "[D]" en caso de ser un directorio
                    if (nodeName.contains(" [")) {
                        nodeName = nodeName.substring(0, nodeName.indexOf(" [")).trim();
                    }

                    // Comparar el nombre del archivo ignorando mayúsculas/minúsculas
                    if (nodeName.equalsIgnoreCase(FileName)) {
                        return true;
                    }
                }
            }
        }
        return false;
    }


    private void GuardarCambiosMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarCambiosMouseEntered
        GuardarCambios.setBackground(new Color(0, 51, 51));
    }//GEN-LAST:event_GuardarCambiosMouseEntered

    private void GuardarCambiosMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GuardarCambiosMouseExited
        GuardarCambios.setBackground(new Color(0, 102, 102));
    }//GEN-LAST:event_GuardarCambiosMouseExited

    private void GuardarCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarCambiosActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GuardarCambiosActionPerformed

    private void DeleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DeleteButtonMouseClicked
        // Lógica para borrar un directorio o archivo:
        jLabel5.setVisible(false);
        jSlider1.setVisible(false);
        SliderValueLabel.setVisible(false);
        jLabel6.setVisible(false);
        ComboBoxCreateSelection.setVisible(false);
        jTextField1.setVisible(false);
        Guardar.setVisible(false);
        jLabel1.setVisible(false);
        GuardarCambios.setVisible(false);

        // Verificar que se haya seleccionado un nodo en el árbol
        if (this.SelectedNode == null) {
            JOptionPane.showMessageDialog(null, "Seleccione una carpeta o archivo para eliminar", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Obtener el nombre del archivo/directorio para la confirmación
        String nombre = this.SelectedNode.getUserObject().toString(); // Ajusta esto según tu estructura de nodos

        // Mostrar diálogo de confirmación
        int confirm = JOptionPane.showConfirmDialog(null,
                "¿Está seguro que desea borrar \"" + nombre + "\"? Esta acción no se puede deshacer.",
                "Confirmación de eliminación",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        // Verificar la respuesta del usuario
        if (confirm == JOptionPane.YES_OPTION) {
            // Aquí va la lógica para borrar el archivo/directorio
            System.out.println("A BORRARRRRR");

            if (this.SelectedNode.getUserObject() instanceof File) {
                File selectedFile = (File) SelectedNode.getUserObject();

                List<File> ListFiles = app.getFileSystemApp().getAssignTableSystem().getListFiles();
                Node<File> listedNode = ListFiles.getpFirst();
                while (listedNode!=null){
                    System.out.println("recorriendo");
                    System.out.println(listedNode.gettInfo().getFirstBlock().getId());
                    System.out.println(selectedFile.getFirstBlock().getId());
                    if (listedNode.gettInfo().getFirstBlock().getId() == selectedFile.getFirstBlock().getId()) {
                        System.out.println("SON IGUALES");
                        selectedFile = listedNode.gettInfo();
                    }
                    listedNode = listedNode.getpNext();
                }

                String Info = app.getFileSystemApp().ShowDate(SelectedNode, "Archivo", "borrado");
                UpdateLogArea(Info);

                removeFromAssignmentTable(selectedFile);
                PanelBlockUpdateSpecificFile(selectedFile, true);
                System.out.println("Obtenemos el archivo");
                this.SelectedNode.removeFromParent(); // Eliminar nodo
                ((DefaultTreeModel) this.FilesTree.getModel()).reload(); // Recargar el modelo del árbol
                this.FilesTree.revalidate(); // Actualizar el árbol
                this.FilesTree.repaint(); // Redibujar el árbol
                this.FilesTree.revalidate();
                this.FilesTree.repaint();

            } else {
                System.out.println("Obtenemos el directorio");
                List<DefaultMutableTreeNode> FilesNodes = app.getFileSystemApp().getAllFilesFromNode(this.SelectedNode);
                System.out.println("esta vacía??? " + FilesNodes.isEmpty());
                System.out.println(FilesNodes.travel());

                // LOGICA DEL LOG
                String Info = app.getFileSystemApp().ShowDate(SelectedNode, "Directorio", "borrado");
                UpdateLogArea(Info);

                if (FilesNodes.isEmpty()) {
                    System.out.println("No tiene hijos este nodo");
                    // La lista está vacía
                } else {
                    Node<DefaultMutableTreeNode> current = FilesNodes.getpFirst();
                    while (current != null) {
                        File selectedFile = (File) current.gettInfo().getUserObject();
                        
                        List<File> ListFiles = app.getFileSystemApp().getAssignTableSystem().getListFiles();
                        Node<File> listedNode = ListFiles.getpFirst();
                        while (listedNode!=null){
                            System.out.println("recorriendo");
                            System.out.println(listedNode.gettInfo().getFirstBlock().getId());
                            System.out.println(selectedFile.getFirstBlock().getId());
                            if (listedNode.gettInfo().getFirstBlock().getId() == selectedFile.getFirstBlock().getId()) {
                                System.out.println("SON IGUALES");
                                selectedFile = listedNode.gettInfo();
                            }
                            listedNode = listedNode.getpNext();
                        }
                        
                        System.out.println(selectedFile + "es el arvhivito");
                        removeFromAssignmentTable(selectedFile);
                        PanelBlockUpdateSpecificFile(selectedFile, true);
                        current = current.getpNext();
                    }
                }
                this.SelectedNode.removeFromParent(); // Eliminar nodo
                ((DefaultTreeModel) this.FilesTree.getModel()).reload(); // Recargar el modelo del árbol
                this.FilesTree.revalidate(); // Actualizar el árbol
                this.FilesTree.repaint(); // Redibujar el árbol
                // si es un directorio...
            }

        } else {
            // Si el usuario cancela, simplemente salimos de la función
            return;
        }

    }//GEN-LAST:event_DeleteButtonMouseClicked

    private void SaveJSONButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveJSONButtonMouseClicked
        // Lógica para guardar los archivos en un json
        // Crear el objeto JSON raíz
        JsonObject root = new JsonObject();

        // Serializar el árbol de archivos (FilesTree)
        DefaultMutableTreeNode rootNode = (DefaultMutableTreeNode) FilesTree.getModel().getRoot();
        JsonObject treeJson = serializeTree(rootNode);
        root.add("filesTree", treeJson);

        // Serializar la lista de archivos
        JsonArray filesArray = serializeFileList(app.getFileSystemApp().getAssignTableSystem().getListFiles());
        root.add("fileList", filesArray);

        // Guardar en archivo JSON
        try (FileWriter writer = new FileWriter("file_system.json")) {
            writer.write(root.toString());
            JOptionPane.showMessageDialog(this, "Datos guardados exitosamente en file_system.json");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar los datos: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_SaveJSONButtonMouseClicked

    // Método para serializar el árbol de archivos
    private JsonObject serializeTree(DefaultMutableTreeNode node) {
        JsonObject nodeJson = new JsonObject();
        Object userObject = node.getUserObject();

        if (userObject instanceof File) {
            File file = (File) userObject;
            nodeJson.addProperty("name", file.getFileName());
            nodeJson.addProperty("type", "file");
            nodeJson.addProperty("blockSize", file.getBlockSize());

            // Serializar el primer bloque
            if (file.getFirstBlock() != null) {
                JsonObject firstBlockJson = new JsonObject();
                firstBlockJson.addProperty("id", file.getFirstBlock().getId());
                firstBlockJson.addProperty("state", file.getFirstBlock().isState());
                nodeJson.add("firstBlock", firstBlockJson);
            } else {
                nodeJson.add("firstBlock", null);
            }

        } else if (userObject instanceof Directory) {
            Directory directory = (Directory) userObject;
            nodeJson.addProperty("name", directory.getDirectoryName());
            nodeJson.addProperty("type", "directory");
        } else {
            nodeJson.addProperty("name", node.toString());
            nodeJson.addProperty("type", "unknown");
        }

        JsonArray childrenArray = new JsonArray();
        for (int i = 0; i < node.getChildCount(); i++) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            childrenArray.add(serializeTree(childNode));
        }

        nodeJson.add("children", childrenArray);
        return nodeJson;
    }

    // Método para serializar la lista de archivos personalizada
    private JsonArray serializeFileList(List<File> fileList) {
        JsonArray filesArray = new JsonArray();

        Node<File> currentFileNode = fileList.getpFirst();
        while (currentFileNode != null) {
            File file = currentFileNode.gettInfo();

            JsonObject fileJson = new JsonObject();
            fileJson.addProperty("fileName", file.getFileName());
            fileJson.addProperty("blockSize", file.getBlockSize());

            // Serializar el primer bloque
            if (file.getFirstBlock() != null) {
                JsonObject firstBlockJson = new JsonObject();
                firstBlockJson.addProperty("id", file.getFirstBlock().getId());
                firstBlockJson.addProperty("state", file.getFirstBlock().isState());
                fileJson.add("firstBlock", firstBlockJson);
            } else {
                fileJson.add("firstBlock", null); // Importante: guardar null si no hay bloque inicial
            }

            // Serializar la lista de bloques asignados al archivo
            JsonArray blocksArray = new JsonArray();
            if (file.getBlocksList() != null) {
                Node<Block> currentBlockNode = file.getBlocksList().getpFirst();
                while (currentBlockNode != null) {
                    Block block = currentBlockNode.gettInfo();
                    JsonObject blockJson = new JsonObject();
                    blockJson.addProperty("id", block.getId());
                    blockJson.addProperty("state", block.isState());
                    blocksArray.add(blockJson);

                    currentBlockNode = currentBlockNode.getpNext();
                }
            }
            fileJson.add("blocksList", blocksArray);

            filesArray.add(fileJson);
            currentFileNode = currentFileNode.getpNext();
        }

        return filesArray;
    }
    
    private TreeNodeData convertToTreeNodeData(DefaultMutableTreeNode node) {
        TreeNodeData treeNodeData = new TreeNodeData(node.toString());
        List<TreeNodeData> children = new List<>("Children");

        for (int i = 0; i < node.getChildCount(); i++) {
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            children.append(convertToTreeNodeData(childNode));
        }

        treeNodeData.setChildren(children);
        return treeNodeData;
    }
    
    

    public void deleteFile() {

    }

    private void removeFromAssignmentTable(File selectedFile) {
        // Obtener la lista de archivos asignados
        List<File> assignedFiles = app.getFileSystemApp().getAssignTableSystem().getListFiles();

        // Intentar eliminar el archivo seleccionado de la lista
        boolean removed = assignedFiles.remove(selectedFile);

        if (removed) {
            System.out.println("Archivo eliminado de la tabla de asignaciones: " + selectedFile.getFileName());
        } else {
            System.out.println("El archivo no se encontró en la tabla de asignaciones.");
        }

        // Actualizar la tabla de asignaciones
        updateAssignmentTable();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimulatorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimulatorFrame().setVisible(true);
            }
        });
    }
    public boolean canAddChild(DefaultMutableTreeNode parent, boolean isDirectory) {
        Object userObject = parent.getUserObject();

        if (userObject instanceof File && !isDirectory) {
            JOptionPane.showMessageDialog(null, "No se puede crear un archivo dentro de otro archivo.");
            return false;
        }

        return true;
    }
    
    public void updateAssignTable(List<File> fileList) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0); // Limpiar la tabla

        Node<File> currentFileNode = fileList.getpFirst();
        while (currentFileNode != null) {
            File file = currentFileNode.gettInfo();
            boolean accessToSD = app.getFileSystemApp().searchAndSet(file.getBlockSize(), file);
            System.out.println("AHORA EL ARCHIVO TIENE " + file.getBlocksList().travel());
            app.getFileSystemApp().getAssignTableSystem().getListFiles().append(file);
            PanelBlocksUpdate(file.getFileName());
            String blocksAssigned = (file.getBlocksList() != null) ? file.getBlocksList().travel2() : "N/A";
            String firstBlockId = (file.getFirstBlock() != null) ? String.valueOf(file.getFirstBlock().getId()) : "N/A";

            model.addRow(new Object[]{file.getFileName(), firstBlockId, file.getBlockSize(), blocksAssigned});

            currentFileNode = currentFileNode.getpNext();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxCreateSelection;
    private javax.swing.JComboBox<String> ComboBoxUserMode;
    private javax.swing.JButton CreateButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTree FilesTree;
    private javax.swing.JButton Guardar;
    private javax.swing.JButton GuardarCambios;
    private javax.swing.JButton SaveJSONButton;
    private javax.swing.JLabel SliderValueLabel;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextArea logTextArea;
    // End of variables declaration//GEN-END:variables

    class BGPane extends JPanel {

        private Image imagen;

        @Override
        public void paint(Graphics g) {
            imagen = new ImageIcon(getClass().getResource("../Images/background.jpg")).getImage();
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);

            setOpaque(false);

            super.paint(g);
        }
    }

}
